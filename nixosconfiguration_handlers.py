#!/usr/bin/env python3

import logging
import shutil
import asyncio
from datetime import datetime
import tempfile
import kopf
import os
import json
import hashlib
from typing import Dict, Optional
import subprocess

from machine_handlers import check_machine_discoverable
from clients import get_machine, update_machine_status, update_configuration_status, get_secret_data
from utils import clone_git_repo, calculate_directory_hash, get_workdir_path, parse_flake_reference, extract_repo_name_from_url, get_remote_commit_hash

logger = logging.getLogger(__name__)


async def inject_additional_files(repo_path: str, config_spec: dict, namespace: str, machine_spec: Optional[dict] = None) -> str:
    """–ò–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å additionalFiles –≤ configurationSubdir –∏ –≤–µ—Ä–Ω—É—Ç—å —Ö–µ—à –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if not config_spec.get('additionalFiles'):
        return calculate_directory_hash(repo_path)
    
    config_subdir = config_spec.get('configurationSubdir', '')
    base_path = os.path.join(repo_path, config_subdir) if config_subdir else repo_path
    
    injected_files = []  # üëà –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    
    for file_spec in config_spec['additionalFiles']:
        file_path = os.path.join(base_path, file_spec['path'])
        file_dir = os.path.dirname(file_path)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(file_dir, exist_ok=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
        value_type = file_spec['valueType']
        
        if value_type == 'Inline':
            content = file_spec.get('inline', '')
            with open(file_path, 'w') as f:
                f.write(content)
            logger.info(f"Injected inline file: {file_spec['path']}")
            injected_files.append(file_path)  # üëà –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            
        elif value_type == 'SecretRef':
            secret_ref = file_spec.get('secretRef', {})
            secret_name = secret_ref.get('name')
            if not secret_name:
                logger.warning(f"Missing secret name for file {file_spec['path']}")
                continue
                
            try:
                secret_data = await get_secret_data(secret_name, namespace)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ secret –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª—é—á
                if secret_data:
                    first_key = next(iter(secret_data.keys()))
                    content = secret_data[first_key]
                    with open(file_path, 'w') as f:
                        f.write(content)
                    logger.info(f"Injected secret file: {file_spec['path']} from secret {secret_name}")
                    injected_files.append(file_path)  # üëà –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                else:
                    logger.warning(f"Empty secret {secret_name} for file {file_spec['path']}")
            except Exception as e:
                logger.error(f"Failed to inject secret file {file_spec['path']}: {e}")
                
        elif value_type == 'NixosFacter':
            if not machine_spec:
                logger.warning(f"Cannot generate NixosFacter for {file_spec['path']}: no machine spec")
                continue
                
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ–≤ NixOS
            facts = generate_nixos_facts(machine_spec)
            content = json.dumps(facts, indent=2)
            with open(file_path, 'w') as f:
                f.write(content)
            logger.info(f"Generated NixosFacter file: {file_spec['path']}")
            injected_files.append(file_path)  # üëà –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
    
    # üëá –î–û–ë–ê–í–õ–Ø–ï–ú –§–ê–ô–õ–´ –í GIT INDEX –ë–ï–ó –ö–û–ú–ú–ò–¢–ê
    if injected_files:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ git –∏–Ω–¥–µ–∫—Å —Å --intend-to-add
            for file_path in injected_files:
                # –î–µ–ª–∞–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç repo_path –¥–ª—è git –∫–æ–º–∞–Ω–¥—ã
                rel_path = os.path.relpath(file_path, repo_path)
                subprocess.run(
                    ['git', 'add', '--intent-to-add', rel_path],
                    cwd=repo_path,
                    check=True,
                    capture_output=True
                )
                logger.debug(f"Added to git index (intend-to-add): {rel_path}")
            
            logger.info(f"Added {len(injected_files)} files to git index with --intend-to-add")
            
        except subprocess.CalledProcessError as e:
            logger.warning(f"Failed to add files to git index: {e}")
            # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        except Exception as e:
            logger.warning(f"Unexpected error during git add: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–µ—à –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –∏–Ω—ä–µ–∫—Ü–∏–∏
    return calculate_directory_hash(base_path)


def generate_nixos_facts(machine_spec: dict) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç—ã NixOS –¥–ª—è –º–∞—à–∏–Ω—ã"""
    facts = {
        "machine-id": machine_spec.get('hostname', 'unknown'),
        "hostname": machine_spec.get('hostname', 'unknown'),
        "ip-address": machine_spec.get('ipAddress', 'unknown'),
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º hardware facts –µ—Å–ª–∏ –µ—Å—Ç—å
    if machine_spec.get('status', {}).get('hardwareFacts'):
        facts.update(machine_spec['status']['hardwareFacts'])
    
    return facts


def get_additional_files_hash(config_spec: dict, namespace: str, machine_spec: Optional[dict] = None) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à –æ—Ç additionalFiles —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not config_spec.get('additionalFiles'):
        return ""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ additionalFiles
    files_content = []
    for file_spec in config_spec['additionalFiles']:
        file_info = {
            'path': file_spec.get('path', ''),
            'valueType': file_spec.get('valueType', ''),
        }
        
        if file_spec.get('valueType') == 'Inline':
            file_info['inline'] = file_spec.get('inline', '')
        elif file_spec.get('valueType') == 'SecretRef':
            file_info['secretRef'] = file_spec.get('secretRef', {})
        elif file_spec.get('valueType') == 'NixosFacter':
            if machine_spec:
                file_info['nixosFacter'] = generate_nixos_facts(machine_spec)
    
    content_str = json.dumps(file_info, sort_keys=True)
    return hashlib.sha256(content_str.encode('utf-8')).hexdigest()


# ...
async def apply_nixos_configuration(
    machine_spec: dict,
    config_spec: dict,
    repo_path: str,
    commit_hash: str,
    is_remove: bool,
    needs_full_install: bool
) -> bool:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é NixOS –∫ –º–∞—à–∏–Ω–µ. SSH-–∫–ª—é—á –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω."""
    tmp_key_path: Optional[str] = None
    try:
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ SSH-–∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
        ssh_key_ref = machine_spec.get("sshKeySecretRef")
        nix_sshopts = "" # –î–ª—è nixos-rebuild
        identity_arg_anywhere = "" # –î–ª—è nixos-anywhere

        if ssh_key_ref:
            secret_name = ssh_key_ref["name"]
            secret_namespace = ssh_key_ref.get("namespace", machine_spec.get("namespace", "default"))

            try:
                secret_data = await get_secret_data(secret_name, secret_namespace)
            except Exception as e:
                logger.error(f"Failed to fetch SSH key secret '{secret_name}' in namespace '{secret_namespace}': {e}")
                return False

            ssh_private_key = secret_data.get("ssh-privatekey")
            if not ssh_private_key:
                logger.error(f"Secret '{secret_name}' does not contain 'ssh-privatekey' key")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', prefix='ssh_key_', delete=False) as tmp:
                tmp.write(ssh_private_key.strip() + '\n')
                tmp_key_path = tmp.name
            os.chmod(tmp_key_path, 0o600)

            # –§–æ—Ä–º–∏—Ä—É–µ–º NIX_SSHOPTS –¥–ª—è nixos-rebuild
            nix_sshopts = f"-i {tmp_key_path}"
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è nixos-anywhere
            identity_arg_anywhere = f"-i {tmp_key_path}"

        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
        config_path = f"{repo_path}/{config_spec['configurationSubdir']}" if config_spec.get('configurationSubdir') else repo_path
        ssh_user = machine_spec["sshUser"]
        target_host = machine_spec.get("ipAddress") or machine_spec["hostname"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–µ–π–∫
        if is_remove and config_spec.get('onRemoveFlake'):
            flake = config_spec['onRemoveFlake']
        else:
            flake = config_spec['flake']

        base_nix = "nix --extra-experimental-features 'nix-command flakes'"

        # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º nixos-rebuild –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª fullInstall —Ä–∞–Ω–µ–µ
        if needs_full_install and not is_remove:
            # nixos-anywhere —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
            cmd_parts = [
                base_nix,
                "run github:nix-community/nixos-anywhere --",
                f"--target-host {ssh_user}@{target_host}",
                f"--flake {config_path}{flake}"
            ]
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–ª—é—á–∞ –¥–ª—è nixos-anywhere, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if identity_arg_anywhere:
                cmd_parts.append(identity_arg_anywhere)
            cmd = " ".join(cmd_parts)
            # –î–ª—è nixos-anywhere NIX_SSHOPTS –º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –ø–µ—Ä–µ–¥–∞—ë–º —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            env_for_cmd = os.environ.copy() # nixos-anywhere –º–æ–∂–µ—Ç –Ω–µ —á–∏—Ç–∞—Ç—å NIX_SSHOPTS
        else:
            # nixos-rebuild –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            # –î–æ–±–∞–≤–ª—è–µ–º NIX_SSHOPTS –∫ –∫–æ–º–∞–Ω–¥–µ shell —á–µ—Ä–µ–∑ env
            env_for_cmd = os.environ.copy()
            if nix_sshopts:
                env_for_cmd['NIX_SSHOPTS'] = nix_sshopts

            cmd_parts = [
                base_nix, # NIX_SSHOPTS –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ env
                "shell nixpkgs#nixos-rebuild --command",
                "nixos-rebuild switch",
                f"--flake {config_path}{flake}",
                f"--target-host {ssh_user}@{target_host}",
            ]
            # –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º --ssh-option IdentityFile, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º NIX_SSHOPTS
            cmd = " ".join(cmd_parts)

        logger.info(f"Executing command: {cmd}")

        # –ü–µ—Ä–µ–¥–∞—ë–º env, —á—Ç–æ–±—ã NIX_SSHOPTS –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è nixos-rebuild
        # nixos-anywhere –ø–æ–ª—É—á–∏—Ç –∫–ª—é—á —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç
        process = await asyncio.create_subprocess_shell(
            cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            env=env_for_cmd # –ü–µ—Ä–µ–¥–∞—ë–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        )

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ stdout –∏ stderr –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        async def read_stream(stream, log_func):
            if stream:
                async for line in stream:
                    decoded = line.decode('utf-8', errors='replace').rstrip()
                    if decoded:
                        log_func(decoded)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ stdout –∏ stderr –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            read_stream(process.stdout, logger.info),
            read_stream(process.stderr, logger.error),
            process.wait()  # –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        )

        if process.returncode != 0:
            logger.error(f"Command failed (code {process.returncode})")
            return False

        logger.info("NixOS configuration applied successfully")
        return True
    except Exception as e:
        logger.error(f"Unexpected error in apply_nixos_configuration: {e}")
        return False

    finally:
        if tmp_key_path and os.path.exists(tmp_key_path):
            os.unlink(tmp_key_path)
# ...


async def reconcile_nixos_configuration(body, spec, name, namespace, **kwargs):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–µ–∫–æ–Ω—Å–∏–ª—è—Ü–∏–∏ –¥–ª—è NixosConfiguration"""
    logger.info(f"Reconciling NixosConfiguration: {name}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º deletion timestamp
        deletion_timestamp = body.get('metadata', {}).get('deletionTimestamp')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã
        machine_name = spec['machineRef']['name']
        machine = get_machine(machine_name, namespace)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        is_discoverable = await check_machine_discoverable(machine['spec'], machine_name, namespace)
        if not is_discoverable:
            logger.warning(f"Skipping configuration application for {name}: machine {machine_name} is not discoverable due to missing credentials")
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await update_configuration_status(
                name,
                namespace,
                {
                    "appliedCommit": None,
                    "lastAppliedTime": None,
                    "targetMachine": machine_name,
                    "conditions": [{
                        "type": "Applied",
                        "status": "False",
                        "lastTransitionTime": datetime.utcnow().isoformat() + "Z",
                        "reason": "MissingCredentials",
                        "message": "Configuration application skipped due to missing SSH credentials"
                    }]
                }
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        repo_name, repo_url, commit_type = parse_flake_reference(spec["gitRepo"] + spec['flake'])
        if commit_type == "floating":
            # –î–ª—è –ø–ª–∞–≤–∞—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º gitRepo
            repo_url = spec['gitRepo']
            repo_name = extract_repo_name_from_url(repo_url)
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç –¥–ª—è –≤–µ—Ç–∫–∏/—Ç–µ–≥–∞
            flake_parts = spec['flake'].split('#')[0].split('/')
            ref = flake_parts[2] if len(flake_parts) > 2 else "main"
            new_commit_hash = await get_remote_commit_hash(repo_url, ref, spec.get('credentialsRef'), namespace)
        else:
            # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç
            new_commit_hash = commit_type
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –ø—É—Ç—å
        workdir_path = get_workdir_path(namespace, name, repo_name, new_commit_hash)
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –ø—É—Ç—å
        repo_path, actual_commit_hash = await clone_git_repo(
            repo_url,
            spec.get('credentialsRef'),
            namespace,
            target_path=workdir_path
        )
        
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à additionalFiles
            additional_files_hash = get_additional_files_hash(spec, namespace, machine['spec'])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            current_status = body.get('status', {})
            current_applied_commit = current_status.get('appliedCommit')
            current_additional_files_hash = current_status.get('additionalFilesHash', '')
            current_has_full_install = current_status.get('fullDiskInstallCompleted', False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–º–º–∏—Ç –≤ –≥–∏—Ç —Ä–µ–ø–æ
            commit_changed = current_applied_commit != actual_commit_hash
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã additionalFiles
            additional_files_changed = current_additional_files_hash != additional_files_hash
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–∫–æ–Ω—Å–∏–ª—è—Ü–∏—é
            should_reconcile = False
            
            if deletion_timestamp:
                if spec.get('onRemoveFlake'):
                    logger.info(f"Deletion detected with onRemoveFlake, triggering reconcile for {name}")
                    should_reconcile = True
                else:
                    logger.info(f"Deletion detected but no onRemoveFlake specified, cleaning up for {name}")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ onRemoveFlake
                    await update_machine_status(
                        machine_name,
                        namespace,
                        {
                            "hasConfiguration": False,
                            "appliedConfiguration": None,
                            "appliedCommit": None
                        }
                    )
                    return
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–Ω—Å–∏–ª—è—Ü–∏–∏
                if commit_changed or additional_files_changed:
                    logger.info(f"Changes detected - commit: {commit_changed}, additionalFiles: {additional_files_changed}, triggering reconcile for {name}")
                    should_reconcile = True
            
            if not should_reconcile:
                logger.info(f"No changes detected, skipping reconcile for {name}")
                return
            
            # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º additionalFiles
            config_hash = await inject_additional_files(repo_path, spec, namespace, machine['spec'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ fullInstall (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞)
            needs_full_install = spec.get('fullInstall', False) and not current_has_full_install
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = await apply_nixos_configuration(
                machine['spec'],
                spec,
                repo_path,
                actual_commit_hash,
                bool(deletion_timestamp),  # is_remove = True –µ—Å–ª–∏ –µ—Å—Ç—å deletionTimestamp
                needs_full_install
            )
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
                current_time = datetime.utcnow().isoformat() + "Z"
                
                if deletion_timestamp:
                    # –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—à–∏–Ω—ã
                    await update_machine_status(
                        machine_name,
                        namespace,
                        {
                            "hasConfiguration": False,
                            "appliedConfiguration": None,
                            "appliedCommit": None
                        }
                    )
                    
                    await update_configuration_status(
                        name,
                        namespace,
                        {
                            "appliedCommit": actual_commit_hash,
                            "lastAppliedTime": current_time,
                            "targetMachine": machine_name,
                            "configurationHash": config_hash,
                            "additionalFilesHash": additional_files_hash,
                            "hasFullInstall": current_has_full_install,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥
                            "conditions": [{
                                "type": "Applied",
                                "status": "True",
                                "lastTransitionTime": current_time,
                                "reason": "Removed",
                                "message": "Configuration successfully removed"
                            }]
                        }
                    )
                else:
                    # –ü—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–Ω—Å–∏–ª—è—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
                    await update_machine_status(
                        machine_name,
                        namespace,
                        {
                            "hasConfiguration": True,
                            "appliedConfiguration": name,
                            "appliedCommit": actual_commit_hash,
                            "lastAppliedTime": current_time
                        }
                    )
                    
                    await update_configuration_status(
                        name,
                        namespace,
                        {
                            "appliedCommit": actual_commit_hash,
                            "lastAppliedTime": current_time,
                            "targetMachine": machine_name,
                            "configurationHash": config_hash,
                            "additionalFilesHash": additional_files_hash,
                            "hasFullInstall": needs_full_install or current_has_full_install,  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥
                            "conditions": [{
                                "type": "Applied",
                                "status": "True",
                                "lastTransitionTime": current_time,
                                "reason": "Success",
                                "message": "Configuration successfully applied"
                            }]
                        }
                    )
                
                logger.info(f"Successfully reconciled configuration {name} to machine {machine_name}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º GC –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
                await garbage_collect_old_versions(namespace, name, workdir_path)
                
            else:
                raise kopf.TemporaryError("Failed to apply configuration", delay=60)
                
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
            shutil.rmtree(repo_path, ignore_errors=True)
            
    except Exception as e:
        logger.error(f"Failed to reconcile NixosConfiguration {name}: {e}")
        raise kopf.TemporaryError(f"Configuration reconciliation failed: {e}", delay=60)


async def garbage_collect_old_versions(namespace: str, name: str, current_path: str):
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é"""
    base_dir = os.path.dirname(current_path)
    if not os.path.exists(base_dir):
        return
    
    for item in os.listdir(base_dir):
        item_path = os.path.join(base_dir, item)
        if item_path != current_path and os.path.isdir(item_path):
            try:
                shutil.rmtree(item_path)
                logger.info(f"Garbage collected old configuration: {item_path}")
            except Exception as e:
                logger.warning(f"Failed to garbage collect {item_path}: {e}")


@kopf.on.create('nixos.infra', 'v1alpha1', 'nixosconfigurations')
@kopf.on.update('nixos.infra', 'v1alpha1', 'nixosconfigurations')
@kopf.on.resume('nixos.infra', 'v1alpha1', 'nixosconfigurations')
@kopf.on.delete('nixos.infra', 'v1alpha1', 'nixosconfigurations')
async def unified_nixos_configuration_handler(body, spec, name, namespace, **kwargs):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å NixosConfiguration"""
    await reconcile_nixos_configuration(body, spec, name, namespace, **kwargs)


@kopf.timer('nixos.infra', 'v1alpha1', 'nixosconfigurations', interval=3600.0)
async def garbage_collect_all_old_configurations(**kwargs):
    """–§–æ–Ω–æ–≤—ã–π GC –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤"""
    base_path = "/tmp/nixos-config"
    if not os.path.exists(base_path):
        return
    
    current_time = datetime.now().timestamp()
    
    for namespace in os.listdir(base_path):
        namespace_path = os.path.join(base_path, namespace)
        if not os.path.isdir(namespace_path):
            continue
            
        for config_name in os.listdir(namespace_path):
            config_path = os.path.join(namespace_path, config_name)
            if not os.path.isdir(config_path):
                continue
                
            for version_dir in os.listdir(config_path):
                version_path = os.path.join(config_path, version_dir)
                if not os.path.isdir(version_path):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                try:
                    stat = os.stat(version_path)
                    age_hours = (current_time - stat.st_mtime) / 3600
                    
                    if age_hours > 24:
                        shutil.rmtree(version_path)
                        logger.info(f"GC: Removed old configuration {version_path} (age: {age_hours:.1f}h)")
                except Exception as e:
                    logger.warning(f"GC: Failed to remove {version_path}: {e}")


@kopf.timer('nixos.infra', 'v1alpha1', 'nixosconfigurations', interval=300.0)
async def check_floating_references(body, spec, name, namespace, **kwargs):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–≤–∞—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ (–≤–µ—Ç–∫–∏/—Ç–µ–≥–∏)"""
    flake_ref = spec.get('flake', '')
    if not flake_ref:
        return
    
    repo_name, repo_url, commit_type = parse_flake_reference(flake_ref)
    if commit_type != "floating":
        return  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞–≤–∞—é—â–∏—Ö —Å—Å—ã–ª–æ–∫
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π HEAD –¥–ª—è –≤–µ—Ç–∫–∏/—Ç–µ–≥–∞
    flake_parts = flake_ref.split('#')[0].split('/')
    ref = flake_parts[2] if len(flake_parts) > 2 else "main"
    
    try:
        current_head = await get_remote_commit_hash(repo_url, ref, spec.get('credentialsRef'), namespace)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ HEAD
        current_status = body.get('status', {})
        current_commit = current_status.get('appliedCommit')
        
        if current_commit and current_commit != current_head:
            logger.info(f"Floating reference {flake_ref} changed from {current_commit} to {current_head}, triggering reconcile")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π reconcile
            await reconcile_nixos_configuration(body, spec, name, namespace, **kwargs)
            
    except Exception as e:
        logger.warning(f"Failed to check floating reference {flake_ref}: {e}")

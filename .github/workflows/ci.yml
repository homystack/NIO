name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio black flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check --diff .
        
    # - name: Test with pytest
    #   run: |
    #     pytest -v

  build-dockerfiles:
    name: Build All Docker Images
    needs: test
    uses: ./.github/workflows/build-dockerfiles.yml
    with:
      tag_pattern: |
        type=ref,event=branch
        type=sha,prefix={{branch}}-
        latest
      push_images: true
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  # deploy-test:
  #   name: Deploy to Test Environment
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'v1.28.0'

  #   - name: Deploy to test cluster
  #     run: |
  #       # Add commands here for deploying to test cluster
  #       # For example, using kind or minikube
  #       echo "Deploying to test environment..."
  #       # kubectl apply -f crds/
  #       # kubectl apply -f deployment.yaml
